Final README.md Content
code
Markdown
# NYS Health Data Explorer & Planning Suite

This is a multi-page Streamlit web application designed for exploring, visualizing, and analyzing key public health datasets for New York State. It serves as an interactive dashboard, an AI-powered reporting tool, and a strategic planning assistant.

**Live Application:** [https://your-final-app-url.streamlit.app/](https://your-final-app-url.streamlit.app/) *(Remember to replace this with your actual URL)*

---

## Core Philosophy & Design

This application was designed to be **Configuration-Driven and Modular**. The primary goal is to make it incredibly easy to add new datasets or modify existing ones without rewriting the entire application logic.

1.  **Multi-Page App Structure:** The app is broken into a series of Python files in the `/pages` directory. Streamlit automatically turns each file into a separate page, creating a clean navigation experience. The `1_Home.py` file serves as the main landing page.

2.  **Modular Code (`/modules`):** All reusable code is organized into modules in the `/modules` directory.
    *   `config.py`: The "brain" of the app. It holds a master `CONFIGS` dictionary that defines the properties of each dashboard.
    *   `utils.py`: Contains all data loading functions and helper functions (e.g., creating charts, fetching specific metrics).
    *   `ai_analysis.py`: Contains all functions for interacting with the Gemini AI, with tailored prompts for each type of analysis.
    *   `ui_components.py`: Contains the master `render_dashboard` function that builds the main UI for the data explorer pages.

3.  **Configuration-Driven UI:** The `CONFIGS` dictionary in `modules/config.py` dictates how each dashboard is built. To change a filter, a column name, or a chart color, you only need to edit this dictionary, not the UI code itself.

4.  **Stateful Reporting (`st.session_state`):** The "Report Builder" and "CHIP Wizard" features work by saving user-generated content (analyses, plan sections) into Streamlit's `st.session_state`. This allows data to persist across pages and be compiled into a final report.

---

## Project Structure
/NYS-Health-Explorer/
|
|-- 1_Home.py (Main landing page)
|-- requirements.txt (Python libraries for deployment)
|-- README.md (This file)
|
|-- data/
| |-- (All local data files: .csv, .xlsx, .geojson)
|
|-- pages/
| |-- 2_CHIRS_Indicators.py
| |-- 3_Prevention_Agenda.py
| |-- ... (and all other dashboard/tool pages)
|
|-- modules/
| |-- init.py
| |-- config.py
| |-- utils.py
| |-- ai_analysis.py
| |-- ui_components.py
code
Code
---

## How to Add a New Dashboard (A Guide for Future You)

To add a new data explorer dashboard (e.g., for a new dataset):

1.  **Add Data File:** Place your new `.csv` or `.xlsx` file inside the `/data` folder.
2.  **Create Loader Function:** In `modules/utils.py`, create a new `load_newdata_data()` function to read and clean your new file.
3.  **Create AI Function:** In `modules/ai_analysis.py`, create a new `analyze_newdata_data()` function with a custom prompt for this data.
4.  **Add Configuration:** In `modules/config.py`, add a new entry to the `CONFIGS` dictionary. Copy an existing configuration and modify all the values to match your new data (file path, function names, column names, etc.).
5.  **Create New Page:** In the `/pages` folder, create a new file (e.g., `14_New_Dashboard.py`). Copy the code from an existing dashboard page (like `2_CHIRS_Indicators.py`) and simply change the key it looks for in the `CONFIGS` dictionary (e.g., `config = CONFIGS["New Dashboard"]`).

---

## Quirks & Lessons Learned (Important Reminders)

This project had several tricky parts. If something is broken, check these things first:

1.  **The `requirements.txt` File is CRITICAL.**
    *   **Problem:** The app kept failing on deployment with `ModuleNotFoundError`.
    *   **Cause:** The `requirements.txt` file was either empty, misnamed (`requirements.txt.txt`), or contained a library (`pandas-calamine`) that was incompatible with the Streamlit Cloud environment.
    *   **Solution:** The `requirements.txt` file must be named *exactly* as is, be in the main project folder, and contain the correct, compatible list of libraries.

2.  **File Paths are a Common Failure Point.**
    *   **Problem:** The app worked on a local machine but failed with `FileNotFoundError` when a page tried to load data.
    *   **Cause:** The code was using a relative path like `"data/my_file.csv"`, which only works if the script is run from the main project folder. Page files are run from the `/pages` directory.
    *   **Solution:** Use Python's `pathlib` library to build absolute paths from the script's own location, e.g., `Path(__file__).parent.parent / "data" / "my_file.csv"`.

3.  **Data Mismatches are Silent Killers.**
    *   **Problem:** The "County Snapshot" page showed "No Data" for several indicators, even though the data existed.
    *   **Cause:** Different source files use different formats for county names ("Dutchess" vs. "Dutchess County") and have slightly different full names for similar indicators ("Adult Smoking" vs. "Prevalence of cigarette smoking among adults").
    *   **Solution:** The final `get_snapshot_data` function in `utils.py` uses hardcoded, **exact** indicator names and handles the different county name formats explicitly. When debugging "No Data" errors, the first step is always to open the source CSV/Excel file and **verify the exact text** of the indicator and county you are looking for.

4.  **Deployment Requires a Clean Slate.**
    *   **Problem:** After pushing fixes to GitHub, the live app still showed old errors.
    *   **Cause:** Aggressive server-side caching on Streamlit Cloud.
    *   **Solution:** The most reliable way to fix a stubborn deployment is to **delete the app** on Streamlit Cloud and **re-deploy it from scratch**. As a last resort, forking the repository to a new URL is a guaranteed way to break the cache. **delete the app** on Streamlit Cloud and **re-deploy it from scratch**. As a last resort, forking the repository to a new URL is a guaranteed way to break the cache.